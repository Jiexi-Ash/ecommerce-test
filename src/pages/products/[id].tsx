import { useEffect, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import Image from "next/image";

import { AnimatePresence, motion } from "framer-motion";
import Navbar from "~/components/Navbar";

import { addToCart, setCartModal } from "~/store/slices/cartSlice";
import { useAppDispatch, useAppSelector } from "~/store/hooks";

import { ProductData } from "~/data";
import Link from "next/link";
import ProductSize from "~/components/Product/ProductSize";
import CartModal from "~/components/Modal/CartModal";

const Product: NextPage = () => {
  const cartModal = useAppSelector((state) => state.cart.cartModal);
  const [selectedSize, setSelectedSize] = useState<string>("");
  const [itemMaxQuantity, setItemMaxQuantity] = useState<number>(1);
  const [itemQuantity, setItemQuantity] = useState<number>(1);
  const dispatch = useAppDispatch();
  const router = useRouter();
  const id = router.query.id;

  const product = ProductData.find((product) => product.id === id);

  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // const user = useUser();

  const handleSize = (size: string) => {
    setSelectedSize(size);
  };

  useEffect(() => {
    if (product) {
      setItemMaxQuantity(product.quantity);
    }
  }, [product]);

  const productVariants = {
    hidden: {
      opacity: 0,
    },
    visible: {
      opacity: 1,
      transition: {
        duration: 1,
        delay: 0.5,
      },
    },
  };

  const productImageVariants = {
    hidden: {
      scale: 0,
    },
    visible: {
      scale: [1.1, 1.1, 1],
      transition: {
        duration: 0.5,
        delay: 0.3,
      },
    },
  };

  const handleAddToCart = () => {
    if (!product) return;
    if (!selectedSize) return;

    dispatch(
      addToCart({
        ...product,
        quantity: itemQuantity,
        size: selectedSize,
      })
    );
  };

  const handleCartModalClose = () => {
    dispatch(setCartModal(false));
  };

  const handleIncreaseQuantity = () => {
    if (itemQuantity === itemMaxQuantity) return;

    setItemQuantity((prev) => prev + 1);
  };

  const handleDecreaseQuantity = () => {
    if (itemQuantity === 1) return;

    setItemQuantity((prev) => prev - 1);
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="flex min-h-screen w-full flex-col">
        {product && (
          <motion.div
            className="mt-6 flex w-full flex-col items-center justify-center px-6 xl:px-10"
            variants={productVariants}
            initial="hidden"
            animate="visible"
          >
            {/* <motion.div
              variants={productImageVariants}
              className="relative flex h-[450px] w-full items-center justify-center overflow-hidden bg-gray-100"
            >
              <Image src={product.imageUrl} width={300} height={300} alt="" />
            </motion.div> */}
            <motion.div
              className="relative flex w-full flex-col overflow-hidden lg:flex-row"
              animate="visible"
              variants={productVariants}
            >
              <motion.div
                variants={productImageVariants}
                className="relative flex  w-full items-center justify-center overflow-hidden bg-gray-100 py-2 lg:max-w-xl"
              >
                <Image
                  src={product.imageUrl}
                  width={300}
                  height={300}
                  alt=""
                  className="lg:hidden"
                  style={{ width: "auto", height: "auto" }}
                />
                <Image
                  src={product.imageUrl}
                  width={400}
                  height={3400}
                  alt=""
                  className="hidden lg:block"
                />
              </motion.div>
              <div className="my-6 flex w-full  flex-col px-6 lg:ml-20 lg:max-w-lg">
                <div className="flex w-full flex-col space-y-2">
                  <h1 className="text-xl font-bold">{product.name}</h1>

                  {/* link to category */}
                  <Link
                    className="text-sm  text-gray-400"
                    href={`/products/${product.category}`}
                  >
                    {product.category}
                  </Link>

                  <span className=" text-lg font-medium">
                    R{product.price.toFixed(2)}
                  </span>
                </div>
                <hr className="mt-6 w-full" />
                <ProductSize size={product.sizes} onHandleSize={handleSize} />
                <div className="mt-6 flex flex-col ">
                  <div className="text-sm font-light">
                    Color: <span className="font-medium">Red</span>
                  </div>
                  <div className="mt-4 flex gap-2">
                    <div className="h-5 w-5 cursor-pointer rounded-full  border border-white bg-red-500 hover:cursor-pointer"></div>
                    <div className="h-5 w-5 cursor-pointer rounded-full  border border-white bg-blue-500 hover:cursor-pointer"></div>
                    <div className="h-5 w-5 cursor-pointer rounded-full  border border-white bg-pink-500 hover:cursor-pointer"></div>
                    <div className="h-5 w-5 cursor-pointer rounded-full border border-white bg-yellow-500 hover:cursor-pointer"></div>
                  </div>
                  <div className="mt-6 flex flex-col ">
                    <div className="text-sm">Quantity</div>
                    <div className="mt-4 flex">
                      <button
                        type="button"
                        className="flex h-10 w-10 items-center justify-center border border-gray-100 bg-white"
                        onClick={handleDecreaseQuantity}
                      >
                        -
                      </button>
                      <span className="flex h-10 w-10 items-center justify-center border border-gray-100 bg-white">
                        {itemQuantity}
                      </span>
                      <button
                        type="button"
                        className="flex h-10 w-10 items-center justify-center border border-gray-100 bg-white"
                        onClick={handleIncreaseQuantity}
                      >
                        +
                      </button>
                    </div>
                  </div>
                  <div className="mt-6 flex w-full flex-col space-y-2">
                    <button
                      className="border border-black bg-white px-4 py-2 text-black transition-all duration-200 ease-out "
                      onClick={handleAddToCart}
                    >
                      Add to wishlist
                    </button>
                    <button
                      className="bg-black px-4 py-2 text-center text-white"
                      type="button"
                      onClick={handleAddToCart}
                    >
                      Add to cart
                    </button>
                  </div>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}

        <AnimatePresence
          mode="wait"
          initial={false}
          onExitComplete={() => null}
        >
          {cartModal && <CartModal handleClose={handleCartModalClose} />}
        </AnimatePresence>
      </main>
    </>
  );
};

export default Product;
